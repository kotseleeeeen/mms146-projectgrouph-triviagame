# -------------------------------
# Quiz Game - Pang pamili
# -------------------------------

import os  # Added: Required for file handling in save/resume features. Feel free to remove in case it breaks anything.
           # ~ Dylan

quiz_questions = {
    "Pop Culture": {
        "Celebrity Culture": [
            {
                "question": "Who was the first Black woman to win the Academy Award for Best Actress in 2002?",
                "options": ["Halle Berry", "Viola Davis", "Whoopi Goldberg", "Angela Basset"],
                "answer": "Halle Berry"
            },
            {
                "question": "Which rap song holds the record for winning the most Grammy Awards?",
                "options": ["Lose Yourself – Eminem", "God’s Plan – Drake", "Alright – Kendrick Lamar", "Not Like Us – Kendrick Lamar"],
                "answer": "Alright – Kendrick Lamar"
            },
            {
                "question": "What was the name of the 2019 YouTube video in which Tati Westbrook ended her friendship with James Charles?",
                "options": ["Breaking My Silence", "Bye James", "Bye Sister", "Sisters No More"],
                "answer": "Bye Sister"
            }
        ],
        "Movies": [
            {
                "question": "What is the highest-grossing film of all time?",
                "options": ["Avengers: Endgame", "Titanic", "Avatar", "Star Wars: The Force Awakens"],
                "answer": "Avatar"
            },
            {
                "question": "Which historical document does Nicholas Cage’s character steal in National Treasure?",
                "options": ["The Declaration of Independence", "The U.S. Constitution", "The Bill of Rights", "The Articles of Confederation"],
                "answer": "The Declaration of Independence"
            },
            {
                "question": "Which of the following is the longest non-experimental narrative film ever made?",
                "options": ["Logistics", "Amra Ekta Cinema Banabo", "The Cure for Insomnia", "Out 1"],
                "answer": "Amra Ekta Cinema Banabo"
            }
        ],
        "TV": [
            {
                "question": "Which TV show ends by suddenly cutting to black?",
                "options": ["True Detective", "The Sopranos", "Breaking Bad", "Lost"],
                "answer": "The Sopranos"
            },
            {
                "question": "Game of Thrones is based on which book series by George R.R. Martin?",
                "options": ["A Song of Ice and Fire", "A Clash of Kings", "A Dance with Dragons", "The Witcher"],
                "answer": "A Song of Ice and Fire"
            },
            {
                "question": "What was the name of the coffee shop in Friends?",
                "options": ["Brewster’s", "The Daily Grind", "Bean There", "Central Perk"],
                "answer": "Central Perk"
            },
            {
                "question": "Which morning TV show was involved in a scandal when two anchors were revealed to be in an extramarital relationship?",
                "options": ["CBS This Morning", "Morning Joe", "Good Morning America", "Today"],
                "answer": "Good Morning America"
            }
        ]
    },
    "Game Trivia": {
        "Video Games": [
            {
                "question": "Which game features the character Link?",
                "options": ["Super Mario", "Zelda", "Halo", "Minecraft"],
                "answer": "Zelda"
            },
            {
                "question": "Which video game series has creatures called 'Pokémon'?",
                "options": ["Digimon", "Pokémon", "Yu-Gi-Oh!", "Dragon Ball Z"],
                "answer": "Pokémon"
            },
            {
                "question": "What is the best-selling video game of all time?",
                "options": ["Minecraft", "Tetris", "Grand Theft Auto V", "Wii Sports"],
                "answer": "Minecraft"
            }
        ]
    },
    "Anime Trivia": {
        "Popular Anime": [
            {
                "question": "Who is the main character of Naruto?",
                "options": ["Sasuke Uchiha", "Naruto Uzumaki", "Kakashi Hatake", "Sakura Haruno"],
                "answer": "Naruto Uzumaki"
            },
            {
                "question": "Which anime features a giant humanoid creature called a Titan?",
                "options": ["One Piece", "Attack on Titan", "Dragon Ball Z", "Bleach"],
                "answer": "Attack on Titan"
            },
            {
                "question": "In One Piece, what is the name of the main pirate crew?",
                "options": ["Blackbeard Pirates", "Straw Hat Pirates", "Red Hair Pirates", "Whitebeard Pirates"],
                "answer": "Straw Hat Pirates"
            }
        ]
    }
}

letters = ["a", "b", "c", "d"]

# -------------------------------
# Player Class / Start of Game???
# -------------------------------

class Player:
    def __init__(self, player_name=""):
        self.player_name = player_name

    def get_name(self):
        return self.player_name

    def set_name(self, new_name):
        self.player_name = new_name

    # Added: Save current game status to a file. Please remove if it breaks anything ~ Dylan
    def save_game_status(self, category, subcategory, score, question_index, filename="savegame.txt"):
        with open(filename, "w") as f:
            f.write(f"{self.player_name},{category},{subcategory},{score},{question_index}\n")

    # Added: Load saved game status from file. Please remove if it breaks anything ~ Dylan
    def load_game_status(self, filename="savegame.txt"):
        try:
            with open(filename, "r") as f:
                line = f.readline().strip()
                name, category, subcategory, score, question_index = line.split(",")
                return {
                    "player_name": name,
                    "category": category,
                    "subcategory": subcategory,
                    "score": int(score),
                    "question_index": int(question_index)
                }
        except FileNotFoundError:
            return None

    # Added: Check if a saved game exists. Please Remove if it breaks anything ~ Dylan
    def has_saved_game(self, filename="savegame.txt"):
        return os.path.exists(filename)

    # Added: Delete saved game file. Please Remove if it breaks anything ~ Dylan
    def delete_saved_game(self, filename="savegame.txt"):
        if os.path.exists(filename):
            os.remove(filename)

# Added: Resume Game Function. Please Remove if it breaks anything ~ Dylan
def resume_saved_game(player, quiz_questions, letters):
    if player.has_saved_game():
        resume = input("You have a saved game. Do you want to resume it? (yes/no): ").lower()
        if resume == "yes":
            saved = player.load_game_status()
            player.set_name(saved["player_name"])
            main_selected = saved["category"]
            sub_selected = saved["subcategory"]
            score = saved["score"]
            start_index = saved["question_index"]

            questions = quiz_questions[main_selected][sub_selected]
            print(f"\nResuming: {main_selected} -> {sub_selected} (Score: {score})\n")

            for i in range(start_index, len(questions)):
                q = questions[i]
                print(q["question"])
                for j in range(len(q["options"])):
                    print(letters[j] + ". " + q["options"][j])

                answer = input("Your answer (a/b/c/d): ").lower()
                if answer in letters:
                    index = letters.index(answer)
                    if q["options"][index] == q["answer"]:
                        print("Correct!\n")
                        score += 1
                    else:
                        print("Wrong! The correct answer was: " + q["answer"] + "\n")
                else:
                    print("Invalid input! Please answer a, b, c, or d.\n")

                player.save_game_status(main_selected, sub_selected, score, i + 1)

            print("Your final score: " + str(score) + "/" + str(len(questions)))
            player.delete_saved_game()
            play_again = input("\nDo you want to go back to main categories? (yes/no): ").lower()
            if play_again != "yes":
                print("Thanks for playing!")
                exit()

# -------------------------------
# Start of Game
# -------------------------------

name = input("Enter your name: ")
player = Player(name)
print(f"Welcome, {player.get_name()}! Are you ready to play?\n")

# Added: Resume game if save file exists. 
# Basically, if the game is interupted before the end, 
# you will given the choice to continue from where you left off. 
# Please remove if it breaks anything. ~ Dylan
resume_saved_game(player, quiz_questions, letters)

# -------------------------------
# Main game loop
# -------------------------------

while True:
    # Choose main category
    main_categories = list(quiz_questions.keys())
    print("\nMain Categories:")
    for i in range(len(main_categories)):
        print(str(i + 1) + ". " + main_categories[i])
    print("0. Quit")

    main_choice = input("Choose a main category (number): ")
    
    if main_choice == "0":
        print("Thanks for playing!")
        break

    if not main_choice.isdigit() or int(main_choice) < 1 or int(main_choice) > len(main_categories):
        print("Invalid choice. Try again.")
        continue

    main_selected = main_categories[int(main_choice) - 1]

    # Choose sub-category
    sub_categories = list(quiz_questions[main_selected].keys())
    print("\nSub-Categories in " + main_selected + ":")
    for i in range(len(sub_categories)):
        print(str(i + 1) + ". " + sub_categories[i])
    print("0. Go back")

    sub_choice = input("Choose a sub-category (number): ")
    
    if sub_choice == "0":
        continue  # back to main category

    if not sub_choice.isdigit() or int(sub_choice) < 1 or int(sub_choice) > len(sub_categories):
        print("Invalid choice. Try again.")
        continue

    sub_selected = sub_categories[int(sub_choice) - 1]

    # Start quiz
    score = 0
    questions = quiz_questions[main_selected][sub_selected]
    print("\nYou chose: " + main_selected + " -> " + sub_selected + "\n")

    for i in range(len(questions)):
        q = questions[i]
        print(q["question"])
        for j in range(len(q["options"])):
            print(letters[j] + ". " + q["options"][j])
        
        answer = input("Your answer (a/b/c/d): ").lower()
        if answer in letters:
            index = letters.index(answer)
            if q["options"][index] == q["answer"]:
                print("Correct!\n")
                score += 1
            else:
                print("Wrong! The correct answer was: " + q["answer"] + "\n")
        else:
            print("Invalid input! Please answer a, b, c, or d.\n")

        # Added: Save progress after each question. Please Remove if it breaks anything. ~Dylan
        player.save_game_status(main_selected, sub_selected, score, i + 1)

    print("Your final score: " + str(score) + "/" + str(len(questions)))

    # Added: Clear saved game after quiz ends. Again, please remove if it breaks anything. ~ Dylan
    player.delete_saved_game()

    # Ask if they want to play again
    play_again = input("\nDo you want to go back to main categories? (yes/no): ").lower()
    if play_again != "yes":
        print("Thanks for playing!")
        break
