# -------------------------------
# Player Class / Start of Game???
# -------------------------------

import os    # Added import os for the purpose of checking saved files and deleting them.
class Player:
    def __init__(self, player_name=""):
        self.player_name = player_name

    def get_name(self):
        return self.player_name

    def set_name(self, new_name):
        self.player_name = new_name

    # Added: Save current game status to a file. Please remove if it breaks anything ~ Dylan
    def save_game_status(self, category, subcategory, score, question_index, filename="savegame.txt"):
        with open(filename, "w") as f:
            f.write(f"{self.player_name},{category},{subcategory},{score},{question_index}\n")

    # Added: Load saved game status from file. Please remove if it breaks anything ~ Dylan
    def load_game_status(self, filename="savegame.txt"):
        try:
            with open(filename, "r") as f:
                line = f.readline().strip()
                name, category, subcategory, score, question_index = line.split(",")
                return {
                    "player_name": name,
                    "category": category,
                    "subcategory": subcategory,
                    "score": int(score),
                    "question_index": int(question_index)
                }
        except FileNotFoundError:
            return None

    # Added: Check if a saved game exists. Please Remove if it breaks anything ~ Dylan
    def has_saved_game(self, filename="savegame.txt"):
        return os.path.exists(filename)

    # Added: Delete saved game file. Please Remove if it breaks anything ~ Dylan
    def delete_saved_game(self, filename="savegame.txt"):
        if os.path.exists(filename):
            os.remove(filename)

# Added: Resume Game Function. Please Remove if it breaks anything ~ Dylan
def resume_saved_game(player, quiz_questions, letters):
    if player.has_saved_game():
        resume = input("You have a saved game. Do you want to resume it? (yes/no): ").lower()
        if resume == "yes":
            saved = player.load_game_status()
            player.set_name(saved["player_name"])
            main_selected = saved["category"]
            sub_selected = saved["subcategory"]
            score = saved["score"]
            start_index = saved["question_index"]

            questions = quiz_questions[main_selected][sub_selected]
            print(f"\nResuming: {main_selected} -> {sub_selected} (Score: {score})\n")

            for i in range(start_index, len(questions)):
                q = questions[i]
                print(q["question"])
                for j in range(len(q["options"])):
                    print(letters[j] + ". " + q["options"][j])

                answer = input("Your answer (a/b/c/d): ").lower()
                if answer in letters:
                    index = letters.index(answer)
                    if q["options"][index] == q["answer"]:
                        print("Correct!\n")
                        score += 1
                    else:
                        print("Wrong! The correct answer was: " + q["answer"] + "\n")
                else:
                    print("Invalid input! Please answer a, b, c, or d.\n")

                player.save_game_status(main_selected, sub_selected, score, i + 1)

            print("Your final score: " + str(score) + "/" + str(len(questions)))
            player.delete_saved_game()
            play_again = input("\nDo you want to go back to main categories? (yes/no): ").lower()
            if play_again != "yes":
                print("Thanks for playing!")
                exit()
